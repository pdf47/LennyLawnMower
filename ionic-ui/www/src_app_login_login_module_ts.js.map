{"version":3,"file":"src_app_login_login_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEd;AAEzC,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,kDAAS;KACrB;CACF,CAAC;IAMW,sBAAsB,SAAtB,sBAAsB;CAAG;AAAzB,sBAAsB;IAJlC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBM;AACM;AACmB;AACrB;AAEmB;AAEvB;IAY5B,eAAe,SAAf,eAAe;CAAG;AAAlB,eAAe;IAV3B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,+DAAmB;YACnB,uDAAW;YACX,yEAAsB;SACvB;QACD,YAAY,EAAE,CAAC,kDAAS,CAAC;KAC1B,CAAC;GACW,eAAe,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;ACnBsB;AACyB;AASnD;IAOX,SAAS,SAAT,SAAS;IAIpB,YACU,WAAkC,EAClC,WAAwB;QADxB,gBAAW,GAAX,WAAW,CAAuB;QAClC,gBAAW,GAAX,WAAW,CAAa;QAJlC,cAAS,GAAG,KAAK,CAAC;IAKf,CAAC;IAEJ,QAAQ;QACN,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACtC,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,4DAAgB,CAAC,CAAC;YAC3D,QAAQ,EAAE,CAAC,EAAE,EAAE,+DAAmB,CAAC;SACpC,CAAC,CAAC;QACH,OAAO,CAAC,IAAI,CACV,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CACpE,CAAC;IACJ,CAAC;IAED,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,CAAC;IAED,QAAQ;QACN,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YAC1B,OAAO;SACR;QAED,iCAAiC;QACjC,KAAK,CAAC,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,WAAW,CAAC,KAAK,CACpB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,YAAY,EACjC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAC9B,CAAC;IACJ,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;CACF;;YA3DQ,mFAAqB;YAM5B,uDAAW;;AAUA,SAAS;IALrB,wDAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,oKAAgC;;KAEjC,CAAC;GACW,SAAS,CA2CrB;AA3CqB;;;;;;;;;;;;;;;ACjBtB,iEAAe,iyCAAiyC","sources":["./src/app/login/login-routing.module.ts","./src/app/login/login.module.ts","./src/app/login/login.page.ts","./src/app/login/login.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    LoginPageRoutingModule,\n  ],\n  declarations: [LoginPage],\n})\nexport class LoginPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService } from '../services/authentication.service';\nimport {\n  AbstractControl,\n  FormControl,\n  Validators,\n  FormGroup,\n  FormBuilder,\n  FormsModule,\n  ReactiveFormsModule,\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n  loginForm: FormGroup;\n  submitted = false;\n\n  constructor(\n    private authService: AuthenticationService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    console.warn('ngOnInit');\n    this.loginForm = this.formBuilder.group({\n      emailAddress: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n    });\n    console.info(\n      'SUCCESS!! :-)\\n\\n' + JSON.stringify(this.loginForm.value, null, 4)\n    );\n  }\n\n  get f(): { [key: string]: AbstractControl } {\n    return this.loginForm.controls;\n  }\n\n  onSubmit(): void {\n    console.info('onSubmit');\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    // display form values on success\n    alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(this.loginForm.value, null, 4));\n    this.authService.login(\n      this.loginForm.value.emailAddress,\n      this.loginForm.value.password\n    );\n  }\n\n  onReset(): void {\n    this.submitted = false;\n    this.loginForm.reset();\n  }\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Lenny Lawn Mower</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Email</ion-label>\\n      <ion-input\\n        formControlName=\\\"emailAddress\\\"\\n        type=\\\"text\\\"\\n        required\\n      ></ion-input>\\n      <div *ngIf=\\\"submitted && f.emailAddress.errors\\\" class=\\\"invalid\\\">\\n        <div *ngIf=\\\"f.emailAddress.errors.required\\\">\\n          Email Address is required\\n        </div>\\n        <div *ngIf=\\\"f.emailAddress.errors && !f.emailAddress.errors.required\\\">\\n          Invalid Email Address\\n        </div>\\n      </div>\\n    </ion-item>\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Password</ion-label>\\n      <ion-input\\n        formControlName=\\\"password\\\"\\n        type=\\\"password\\\"\\n        required\\n      ></ion-input>\\n      <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid\\\">\\n        <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\n      </div>\\n    </ion-item>\\n\\n    <ion-row>\\n      <ion-col>\\n        <ion-button size=\\\"small\\\" type=\\\"submit\\\">Sign In</ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </form>\\n</ion-content>\\n\";"],"names":[],"sourceRoot":"webpack:///"}